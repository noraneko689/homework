#include <iostream>
using namespace std;

class Matrix {
private:
    int rows;
    int cols;
    int** data;

public:
    Matrix(int r, int c) : rows(r), cols(c) {
        data = new int* [rows];
        for (int i = 0; i < rows; i++) {
            data[i] = new int[cols];
            for (int j = 0; j < cols; j++)
                data[i][j] = 0;
        }
    }

    Matrix(const Matrix& other) {
        rows = other.rows;
        cols = other.cols;
        data = new int* [rows];
        for (int i = 0; i < rows; i++) {
            data[i] = new int[cols];
            for (int j = 0; j < cols; j++)
                data[i][j] = other.data[i][j];
        }
    }

    ~Matrix() {
        for (int i = 0; i < rows; i++)
            delete[] data[i];
        delete[] data;
    }

    void set(int r, int c, int value) {
        if (r >= 0 && r < rows && c >= 0 && c < cols)
            data[r][c] = value;
        else
            cout << "Error: matrix index out of bounds!" << endl;
    }

    int get(int r, int c) const {
        if (r >= 0 && r < rows && c >= 0 && c < cols)
            return data[r][c];
        else {
            cout << "Error: matrix index out of bounds!" << endl;
            return 0;
        }
    }

    void print() const {
        for (int i = 0; i < rows; i++) {
            for (int j = 0; j < cols; j++)
                cout << data[i][j] << " ";
            cout << endl;
        }
    }

    friend class MatrixOperations;
};

class MatrixOperations {
public:
    static Matrix add(const Matrix& A, const Matrix& B) {
        if (A.rows != B.rows || A.cols != B.cols) {
            cout << "Error: matrix dimensions do not match!" << endl;
            return Matrix(0, 0);
        }
        Matrix result(A.rows, A.cols);
        for (int i = 0; i < A.rows; i++)
            for (int j = 0; j < A.cols; j++)
                result.data[i][j] = A.data[i][j] + B.data[i][j];
        return result;
    }

    static Matrix multiply(const Matrix& A, const Matrix& B) {
        if (A.cols != B.rows) {
            cout << "Error: matrices cannot be multiplied!" << endl;
            return Matrix(0, 0);
        }
        Matrix result(A.rows, B.cols);
        for (int i = 0; i < A.rows; i++)
            for (int j = 0; j < B.cols; j++)
                for (int k = 0; k < A.cols; k++)
                    result.data[i][j] += A.data[i][k] * B.data[k][j];
        return result;
    }
};

int main() {
    Matrix A(2, 2);
    Matrix B(2, 2);

    A.set(0, 0, 1);
    A.set(0, 1, 2);
    A.set(1, 0, 3);
    A.set(1, 1, 4);

    B.set(0, 0, 5);
    B.set(0, 1, 6);
    B.set(1, 0, 7);
    B.set(1, 1, 8);

    cout << "Matrix A:" << endl;
    A.print();
    cout << "Matrix B:" << endl;
    B.print();

    Matrix C = MatrixOperations::add(A, B);
    cout << "A + B:" << endl;
    C.print();

    Matrix D = MatrixOperations::multiply(A, B);
    cout << "A * B:" << endl;
    D.print();

    return 0;
}
